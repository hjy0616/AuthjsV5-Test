generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  USER
  MANAGER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  accountId     String?
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String    @default("")
  password      String    @default("")
  role          ROLE      @default(USER)
  
  accounts      Account[]
  sessions      Session[]
  chatroom      ChatRoom[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  name      String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  views     Int      @default(0)
  score     Int      @default(0)
}


// ChatRoom Schema
model Group {
  id                Int               @id @default(autoincrement())
  name              String
  userId            String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  description       String?

  chatRooms ChatRoom[]
}

model ChatRoom {
  id                Int               @id @default(autoincrement())
  name              String
  userId            String
  groupId           Int
  isGroup           Boolean
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  description       String?
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  group             Group             @relation(fields: [groupId], references: [id])
}